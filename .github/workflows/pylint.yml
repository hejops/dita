# https://github.com/marketplace/actions/github-action-for-pylint
# https://www.henryschmale.org/2021/01/21/pylint-github-actions.html
# Note: pylint can be very strict, so args may need to be tweaked.
name: Pylint

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m venv venv
      #     # https://stackoverflow.com/a/74669486
      #     # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      #     . venv/bin/activate
      #     echo PATH=$PATH >> $GITHUB_ENV
      #     pip install -U pip wheel setuptools
      #     pip install pylint
      #     pip install -r requirements.txt
      #     # https://github.com/pylint-dev/pylint/blob/59194ebfa600b91ec4d5cef49370b7132b0413a3/pylint/lint/base_options.py#L153
      #     pylint --fail-under=9 $(git ls-files '*.py')
      #     deactivate

      # https://github.com/marketplace/actions/python-poetry-action#workflow-example-cache-the-virtual-environment
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      # - name: Setup a local virtual environment (if no poetry.toml file)
      #   run: |
      #     poetry config virtualenvs.create true --local
      #     poetry config virtualenvs.in-project true --local
      # - uses: actions/cache@v3
      #   name: Define a cache for the virtual environment based on the dependencies lock file
      #   with:
      #     path: ./.venv
      #     key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run pylint
        run: |
          poetry add pylint
          poetry run pylint --fail-under=9 $(git ls-files '*.py')
          # 'cyclic imports' seems to be a false negative
